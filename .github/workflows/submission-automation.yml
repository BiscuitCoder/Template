name: Submission Issue Automation

on:
  issues:
    types: [closed]

permissions:
  contents: write
  issues: write

concurrency:
  group: hackathon-automation
  cancel-in-progress: false

jobs:
  check-registration:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed' && startsWith(github.event.issue.title, 'Submission')
    outputs:
      user-registered: ${{ steps.check-user.outputs.registered }}
    steps:
      - name: Wait for potential registration workflow
        run: |
          echo "⏳ 等待可能的注册工作流完成..."
          echo "这确保在批量关闭 issue 时，注册工作流能先执行"
          sleep 30
          
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Check if user is registered
        id: check-user
        run: |
          USER="${{ github.event.issue.user.login }}"
          
          # 检查多次，给注册工作流更多时间完成
          for i in {1..3}; do
            if [ -f "registration/${USER}.md" ]; then
              echo "registered=true" >> $GITHUB_OUTPUT
              echo "✅ User ${USER} is registered"
              exit 0
            else
              echo "❌ User ${USER} registration file not found (attempt $i/3)"
              if [ $i -lt 3 ]; then
                echo "⏳ 等待 15 秒后重试..."
                sleep 15
                # 重新拉取最新代码
                git pull origin main || true
              fi
            fi
          done
          
          echo "registered=false" >> $GITHUB_OUTPUT
          echo "❌ User ${USER} is not registered after 3 attempts"

  process-submission:
    runs-on: ubuntu-latest
    needs: check-registration
    if: needs.check-registration.outputs.user-registered == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Submission Info, Create Project Folder and Update Table
        id: extract-submission
        run: |
          node materials/scripts/submission_extract.js
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
          ISSUE_USER: ${{ github.event.issue.user.login }}

      - name: Comment on issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.payload.issue.number;
            try {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body: `✅ Submission processed successfully!\n\n- 项目信息已归档\n- README.md Submission 区域已自动更新\n\n感谢你的提交！🎉`
              });
              console.log(`Comment posted on issue #${issue_number}`);
            } catch (error) {
              console.error(`Error posting comment: ${error.message}`);
              core.setFailed(`Error posting comment: ${error.message}`);
            }

  handle-unregistered:
    runs-on: ubuntu-latest
    needs: check-registration
    if: needs.check-registration.outputs.user-registered == 'false'
    steps:
      - name: Comment on issue for unregistered user
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.payload.issue.number;
            const user = '${{ github.event.issue.user.login }}';
            
            try {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body: `❌ 提交失败：用户未注册\n\n@${user} 您需要先完成注册才能提交项目。\n\n请先创建一个注册 Issue：\n- 前往 [Issues](${context.payload.repository.html_url}/issues/new)\n- 选择 "Registration" 模板\n- 填写您的个人信息\n- 等待注册完成后再提交项目\n\n注册完成后，请重新创建提交 Issue。\n\n感谢您的理解！🙏`
              });
              
              // 重新打开 issue，这样用户能看到评论
              await github.rest.issues.update({
                owner,
                repo,
                issue_number,
                state: 'open'
              });
              
              console.log(`Comment posted and issue reopened for unregistered user: ${user}`);
            } catch (error) {
              console.error(`Error handling unregistered user: ${error.message}`);
              core.setFailed(`Error handling unregistered user: ${error.message}`);
            }